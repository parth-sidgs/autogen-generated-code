        from typing import Optional

class Node:
    """
    Represents a node in a singly linked list.
    """
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:
    """
    Represents a singly linked list.
    """
    def __init__(self):
        self.head = None

    def append(self, data):
        """
        Appends a new node with the given data to the end of the list.
        """
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
            return
        last_node = self.head
        while last_node.next:
            last_node = last_node.next
        last_node.next = new_node

    def reverse(self):
        """
        Reverses the linked list in-place with O(n) time complexity.
        """
        prev = None
        curr = self.head
        while curr:
            next_node = curr.next  # Store the next node temporarily
            curr.next = prev        # Reverse the current node's pointer
            prev = curr             # Move 'prev' one step forward
            curr = next_node        # Move 'curr' one step forward

        self.head = prev          # Update the head of the reversed list

    def print_list(self):
        """
        Prints the data of each node in the list.
        """
        curr = self.head
        while curr:
            print(curr.data, end=" -> ")
            curr = curr.next
        print("None")


# Example usage:
llist = LinkedList()
llist.append(1)
llist.append(2)
llist.append(3)
llist.append(4)

print("Original Linked List:")
llist.print_list()

llist.reverse()

print("Reversed Linked List:")
llist.print_list()
